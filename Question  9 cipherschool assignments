
/*Problem Statement:
A Direct Address Table is a simple way to map a key to its value using an array. The index of the array represents the key, and the value at that index represents the data associated with the key.

Write a program to implement a Direct Address Table for integer keys ranging from 0 to n-1. You need to support the following operations:

Insert (key, value): Insert a value at the given key.
Search (key): Retrieve the value associated with the given key.
Delete (key): Remove the value associated with the given key.

Input:
The first line contains an integer n (the size of the table).
The second line contains an integer q (the number of queries).
Each of the next q lines contains a query in one of the following formats:
- INSERT key value: Insert value at the position key.
- SEARCH key: Retrieve the value at the position key. If the key does not exist, return ""NOT FOUND"".
- DELETE key: Remove the value at the position key.

Output:
For each SEARCH query, output the value associated with the key or ""NOT FOUND"" if the key does not exist.

Example:
Input:
5
6
INSERT 2 100
INSERT 3 200
SEARCH 2
DELETE 2
SEARCH 2
SEARCH 3

Output:
100
NOT FOUND
200

Explanation:

After INSERT 2 100, the table looks like: [None, None, 100, None, None].
After INSERT 3 200, the table looks like: [None, None, 100, 200, None].
SEARCH 2 retrieves the value 100.
DELETE 2 removes the value at key 2. The table becomes [None, None, None, 200, None].
SEARCH 2 now returns ""NOT FOUND"".
SEARCH 3 retrieves the value 200.
This problem tests the understanding of direct address tables and basic hashing concepts.
*/



#include <iostream>
using namespace std;

class DirectAddressTable {
private:
    vector<int> table;
    vector<bool> exists;
    int size;

public:
    DirectAddressTable(int n) : size(n) {
        table.resize(n, -1);
        exists.resize(n, false);
    }

    void insert(int key, int value) {
        table[key] = value;
        exists[key] = true;
    }

    string search(int key) {
        if (exists[key]) return to_string(table[key]);
        return "NOT FOUND";
    }

    void erase(int key) {
        exists[key] = false;
    }
};

int main() {
    int n, q;
    cin >> n >> q;
    DirectAddressTable dat(n);
    
    while (q--) {
        string operation;
        int key, value;
        cin >> operation >> key;
        
        if (operation == "INSERT") {
            cin >> value;
            dat.insert(key, value);
        } else if (operation == "SEARCH") {
            cout << dat.search(key) << endl;
        } else if (operation == "DELETE") {
            dat.erase(key);
        }
    }
    
    return 0;
}
